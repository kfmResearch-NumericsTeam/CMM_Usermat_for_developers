!-----------------------------------------------------------------------
!     SUBROUTINE ZUR BERECHNUNG DER SPANNUNGEN IN FUNKTION DER
!     VERZERRUNGEN NACH EINEM MODELL F�R ZWEIACHSIGE
!     DRUCKBEANSPRUCHUNGEN
!
!     PROGRAMMIERUNG:     DR. KAREL THOMA, HOCHSCHULE LUZERN
!                         PATRICK ROOS, HOCHSCHULE LUZERN
!     DATUM:              03.06.2014
!-----------------------------------------------------------------------
      SUBROUTINE SUB_S_E_DRUCK(EX,EY,GAMMA_XY,DEPS,MATERIAL,
     &                         SCHICHTINFO,SPANNUNGEN,DRUCK)

      IMPLICIT NONE

      ! VARIABLENDEKLARATION
      DOUBLE COMPLEX, INTENT(IN) :: EX, EY, GAMMA_XY
      DOUBLE PRECISION, DIMENSION(60), INTENT(IN) :: MATERIAL
      DOUBLE PRECISION, DIMENSION(3), INTENT(IN) :: DEPS
      INTEGER, INTENT(IN) :: SCHICHTINFO
      DOUBLE COMPLEX, DIMENSION(3), INTENT(OUT) :: SPANNUNGEN
      DOUBLE PRECISION, DIMENSION(11), INTENT(OUT) :: DRUCK

      INTEGER :: DIMENS, STAHL1, STAHL2,STATUS_Q
      INTEGER, DIMENSION(2) :: BETON
      DOUBLE COMPLEX ::   N, HOEHE, CO, CU,
     &                    AS1, DM1, PSI1, FSY1, FSU1, ESU1, ESV1, ES1,
     &                    KA1, KB1, KC1,
     &                    AS2, DM2, PSI2, FSY2, FSU2, ESU2, ESV2, ES2,
     &                    KA2, KB2, KC2,
     &                    FCC, ECU, K_E, VC,
     &                    SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z
      DOUBLE COMPLEX :: SIGMA_S1, SIGMA_S2, SIGMA_C1, SIGMA_C3
      DOUBLE COMPLEX :: THETA, E1, E3, DELTA_Z, EC, FC, EPS1, EPS2, PI
      DOUBLE COMPLEX, DIMENSION(3) :: SIGMA_S, SIGMA_C
      DOUBLE PRECISION, DIMENSION(5) :: D_THETA, D_PSI1, D_PSI2

      ! INTERFACES ZU EXTERNEN SUBROUTINEN
      INTERFACE

      SUBROUTINE SUB_THETA_ALLGEMEIN(EX,EY,GAMMA_XY,THETA)
        DOUBLE COMPLEX, INTENT(IN) :: EX, EY, GAMMA_XY
        DOUBLE COMPLEX, INTENT(OUT) :: THETA
      END SUBROUTINE SUB_THETA_ALLGEMEIN

      SUBROUTINE SUB_E1_E3(EX,EY,GAMMA_XY,E1,E3)
        DOUBLE COMPLEX,  INTENT(IN) :: EX, EY, GAMMA_XY
        DOUBLE COMPLEX, INTENT(OUT) :: E1, E3
      END SUBROUTINE SUB_E1_E3

      SUBROUTINE SUB_S_E_BETON(BETON,E1,E3,FCC,ECU,K_E,SIGMA_C3)
        INTEGER, DIMENSION(2), INTENT(IN) :: BETON
        DOUBLE COMPLEX, INTENT(IN) :: E1, E3, FCC, ECU, K_E
        DOUBLE COMPLEX, INTENT(OUT):: SIGMA_C3
      END SUBROUTINE SUB_S_E_BETON

      SUBROUTINE SUB_S_E_STAHL(STAHL,EPS,FSY,FSU,ESU,ESV,ES,
     &                         KA,KB,KC,SIGMA_S)
        INTEGER, INTENT(IN) :: STAHL
        DOUBLE COMPLEX, INTENT(IN) :: EPS,FSY,FSU,ESU,ESV,ES,KA,KB,KC
        DOUBLE COMPLEX, INTENT(OUT):: SIGMA_S
      END SUBROUTINE SUB_S_E_STAHL

      FUNCTION ABS_C(VAL)
        DOUBLE COMPLEX :: ABS_C
        DOUBLE COMPLEX, INTENT(IN) :: VAL
      END FUNCTION ABS_C

      FUNCTION MIN_RC(VAL1,VAL2)
        DOUBLE COMPLEX :: MIN_RC
        DOUBLE COMPLEX, INTENT(IN) :: VAL1, VAL2
      END FUNCTION MIN_RC

      SUBROUTINE SUB_ZQ(SCHICHTINFO,MATERIAL
     &                  ,SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z,STATE)
        INTEGER,INTENT(IN)            :: SCHICHTINFO
        DOUBLE PRECISION,DIMENSION(60),INTENT(IN):: MATERIAL
        DOUBLE COMPLEX,INTENT(OUT)    :: SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z
        INTEGER,INTENT(INOUT)         :: STATE
      END SUBROUTINE SUB_ZQ

      END INTERFACE

      ! VORGABEN:
      DRUCK = 0D0
      PI = CMPLX(4.0D0*ATAN(1.0D0),0D0,KIND=8)

      ! EINLESEN DER MATERIALKENNWERTE:
      ! ALLGEMEIN:
      DIMENS = MATERIAL(1)

      ! GEOMETRIE:
      N = CMPLX(MATERIAL(3),0D0,KIND=8)
      HOEHE = CMPLX(MATERIAL(4),0D0,KIND=8)
      CO = CMPLX(MATERIAL(5),0D0,KIND=8)
      CU = CMPLX(MATERIAL(6),0D0,KIND=8)

      ! BEWEHRUNG IN X-RICHTUNG:
      STAHL1 = MATERIAL(7)
      AS1 = CMPLX(MATERIAL(9),0D0,KIND=8)
      DM1 = CMPLX(MATERIAL(10),0D0,KIND=8)
      PSI1 = CMPLX(MATERIAL(11),0D0,KIND=8)*(PI/CMPLX(180D0,0D0,KIND=8))
      FSY1 = CMPLX(MATERIAL(12),0D0,KIND=8)
      FSU1 = CMPLX(MATERIAL(13),0D0,KIND=8)
      ESU1 = CMPLX(MATERIAL(14),0D0,KIND=8)
      ESV1 = CMPLX(MATERIAL(15),0D0,KIND=8)
      ES1 = CMPLX(MATERIAL(16),0D0,KIND=8)
      KA1 = CMPLX(MATERIAL(17),0D0,KIND=8)
      KB1 = CMPLX(MATERIAL(18),0D0,KIND=8)
      KC1 = CMPLX(MATERIAL(19),0D0,KIND=8)

      ! BEWEHRUNG IN Y-RICHTUNG:
      STAHL2 = MATERIAL(20)
      AS2 = CMPLX(MATERIAL(22),0D0,KIND=8)
      DM2 = CMPLX(MATERIAL(23),0D0,KIND=8)
      PSI2 = CMPLX(MATERIAL(24),0D0,KIND=8)*(PI/CMPLX(180D0,0D0,KIND=8))
      FSY2 = CMPLX(MATERIAL(25),0D0,KIND=8)
      FSU2 = CMPLX(MATERIAL(26),0D0,KIND=8)
      ESU2 = CMPLX(MATERIAL(27),0D0,KIND=8)
      ESV2 = CMPLX(MATERIAL(28),0D0,KIND=8)
      ES2 = CMPLX(MATERIAL(29),0D0,KIND=8)
      KA2 = CMPLX(MATERIAL(30),0D0,KIND=8)
      KB2 = CMPLX(MATERIAL(31),0D0,KIND=8)
      KC2 = CMPLX(MATERIAL(32),0D0,KIND=8)

      ! BER�CKSICHTIGUNG GENEIGTER BEWEHRUNG:
      D_PSI1(1) = REAL(ABS(ABS(REAL(PSI1))))                 ! PSI1 = 0
      D_PSI1(2) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)/2D0))    ! PSI1 = 90
      D_PSI1(3) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)))        ! PSI1 = 180
      D_PSI1(4) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)*1.5D0))  ! PSI1 = 270
      D_PSI1(5) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)*2D0))    ! PSI1 = 360

      D_PSI2(1) = REAL(ABS(ABS(REAL(PSI2))))                 ! PSI1 = 0
      D_PSI2(2) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)/2D0))    ! PSI1 = 90
      D_PSI2(3) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)))        ! PSI1 = 180
      D_PSI2(4) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)*1.5D0))  ! PSI1 = 270
      D_PSI2(5) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)*2D0))    ! PSI1 = 360

      IF (MIN(D_PSI1(1),D_PSI1(2),D_PSI1(3),D_PSI1(4),D_PSI1(5))
     &    .LT. 1D-2) THEN
      ES1 = ES1
      ESU1 = ESU1
      ESV1 = ESV1
      ELSE
      ES1 = ES1 !COS(PSI1)*COS(PSI1)*ES1
      ESU1 = ESU1 !/(COS(PSI1)*COS(PSI1))
      ESV1 = ESV1 !/(COS(PSI1)*COS(PSI1))
      ENDIF

      IF (MIN(D_PSI2(1),D_PSI2(2),D_PSI2(3),D_PSI2(4),D_PSI2(5))
     &    .LT. 1D-2) THEN
      ES2 = ES2
      ESU2 = ESU2
      ESV2 = ESV2
      ELSE
      ES2=  ES2 ! SIN(PSI2)*SIN(PSI2)*ES2
      ESU2 = ESU2 !/(SIN(PSI2)*SIN(PSI2))
      ESV2 = ESV2 !/(SIN(PSI2)*SIN(PSI2))
      ENDIF

      ! BETON:
      IF (ABS(MATERIAL(33)-1.0D0) .LT. 0.1D0) THEN
        BETON(1) = 3
      ELSE
        BETON(1) = MATERIAL(33)
      END IF
      BETON(2) = MATERIAL(41)
      FCC = CMPLX(MATERIAL(34),0D0,KIND=8)
      VC = CMPLX(MATERIAL(35),0D0,KIND=8)
      ECU = CMPLX(MATERIAL(36),0D0,KIND=8)
      K_E = CMPLX(MATERIAL(37),0D0,KIND=8)

      ! BERECHNUNGEN BETONKENNWERTE:
      EC = K_E*FCC**CMPLX((1D0/3D0),0D0,KIND=8)

      ! HILFSWERTE:
      DELTA_Z = HOEHE/N

      ! HAUPTVERZERRUNGEN:
      CALL SUB_E1_E3(EX,EY,GAMMA_XY,E1,E3)
      CALL SUB_THETA_ALLGEMEIN(EX,EY,GAMMA_XY,THETA)

      ! KONTROLLE THETA
      D_THETA(1) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)/2D0))
      D_THETA(2) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)*1.5D0))
      D_THETA(3) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)))
      D_THETA(4) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)*2D0))
      D_THETA(5) = REAL(ABS(REAL(THETA)))

      ! BETONHAUPTSPANNUNGEN:
      CALL SUB_S_E_BETON(BETON,CMPLX(0D0,0D0,KIND=8),E1,FCC,ECU,
     &                   K_E,SIGMA_C1)
      CALL SUB_S_E_BETON(BETON,CMPLX(0D0,0D0,KIND=8),E3,FCC,ECU,
     &                   K_E,SIGMA_C3)


      SIGMA_C(1) = SIGMA_C1*COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
     &               COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8))) + SIGMA_C3*
     &               COS(THETA)*COS(THETA)
      SIGMA_C(2) = SIGMA_C1*SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
     &               SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8))) + SIGMA_C3*
     &               SIN(THETA)*SIN(THETA)
      SIGMA_C(3) = SIGMA_C1*(-SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
     &               COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))) + SIGMA_C3*
     &               (-SIN(THETA)*COS(THETA))

      FC = MIN_RC(ABS_C((FCC**CMPLX(2D0/3D0,0D0,KIND=8)/
     &     CMPLX(0.4D0,0D0,KIND=8))),ABS_C(FCC**
     &     CMPLX(2D0/3D0,0D0,KIND=8)/(CMPLX(0.4D0,0D0,KIND=8)+
     &      CMPLX(30D0,0D0,KIND=8)*E1)))

      ! STAHLSPANNUNGEN:
      IF (MIN(D_PSI1(1),D_PSI1(3),D_PSI1(5)) .LT. 1D-2) THEN
        EPS1 = EX
      ELSE IF (MIN(D_PSI1(2),D_PSI1(4)) .LT. 1D-2) THEN
        EPS1 = EY
      ELSE
        EPS1 = EX*COS(-PSI1)*COS(-PSI1)+EY*SIN(-PSI1)*SIN(-PSI1)+
     &         GAMMA_XY*(-SIN(-PSI1)*COS(-PSI1))
      END IF


      IF (MIN(D_PSI2(2),D_PSI2(4)) .LT. 1D-2 ) THEN
        EPS2 = EY
      ELSE IF (MIN(D_PSI2(1),D_PSI2(3),D_PSI2(5)) .LT. 1D-2 ) THEN
        EPS2 = EX
      ELSE
        EPS2 = EX*COS(-PSI2)*COS(-PSI2)+EY*SIN(-PSI2)*SIN(-PSI2)+
     &         GAMMA_XY*(-SIN(-PSI2)*COS(-PSI2))
      END IF


      IF (REAL(DM1) .GT. 0.1D0) THEN
        CALL SUB_S_E_STAHL(STAHL1,EPS1,FSY1,FSU1,ESU1,ESV1,ES1,KA1,
     &                     KB1,KC1,SIGMA_S1)
      ELSE
        SIGMA_S1 = CMPLX(0D0,0D0,KIND=8)
      END IF

      IF (REAL(DM2) .GT. 0.1D0) THEN
        CALL SUB_S_E_STAHL(STAHL2,EPS2,FSY2,FSU2,ESU2,ESV2,ES2,KA2,
     &                     KB2,KC2,SIGMA_S2)
      ELSE
        SIGMA_S2 = CMPLX(0D0,0D0,KIND=8)
      END IF

      ! UNTERSCHEIDUNG 2D / 3D:
      IF (SCHICHTINFO .EQ. 1 .OR. SCHICHTINFO .EQ. 4) THEN
        AS2 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_S2 = CMPLX(0D0,0D0,KIND=8)
      ELSE IF (SCHICHTINFO .EQ. 2 .OR. SCHICHTINFO .EQ. 3) THEN
        AS1 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_S1 = CMPLX(0D0,0D0,KIND=8)
      END IF

      IF (ABS(DIMENS-1) .LT. 0.1D0) THEN
        SIGMA_S(1) = SIGMA_S1*COS(-PSI1)*COS(-PSI1)*(AS1/HOEHE)+
     &               SIGMA_S2*COS(-PSI2)*COS(-PSI2)*(AS2/HOEHE)
        SIGMA_S(2) = SIGMA_S1*SIN(-PSI1)*SIN(-PSI1)*(AS1/HOEHE)+
     &               SIGMA_S2*SIN(-PSI2)*SIN(-PSI2)*(AS2/HOEHE)
        SIGMA_S(3) = SIGMA_S1*(-SIN(-PSI1)*COS(-PSI1))*(AS1/HOEHE)+
     &               SIGMA_S2*(-SIN(-PSI2)*COS(-PSI2))*(AS2/HOEHE)

      ELSE
        SIGMA_S(1) = SIGMA_S1*COS(-PSI1)*COS(-PSI1)*(AS1/DELTA_Z)+
     &               SIGMA_S2*COS(-PSI2)*COS(-PSI2)*(AS2/DELTA_Z)
        SIGMA_S(2) = SIGMA_S1*SIN(-PSI1)*SIN(-PSI1)*(AS1/DELTA_Z)+
     &               SIGMA_S2*SIN(-PSI2)*SIN(-PSI2)*(AS2/DELTA_Z)
        SIGMA_S(3) = SIGMA_S1*(-SIN(-PSI1)*COS(-PSI1))*(AS1/DELTA_Z)+
     &               SIGMA_S2*(-SIN(-PSI2)*COS(-PSI2))*(AS2/DELTA_Z)

      END IF

      ! SPANNUNGEN TOTAL:
      SPANNUNGEN(1) = (CMPLX(1D0,0D0,KIND=8)/(CMPLX(1D0,0D0,KIND=8)-
     &                (VC*VC)))*SIGMA_C(1)+(VC/(CMPLX(1D0,0D0,KIND=8)-
     &                (VC*VC)))*SIGMA_C(2)+SIGMA_S(1)
      SPANNUNGEN(2) = (CMPLX(1D0,0D0,KIND=8)/(CMPLX(1D0,0D0,KIND=8)-
     &                (VC*VC)))*SIGMA_C(2)+(VC/(CMPLX(1D0,0D0,KIND=8)-
     &                (VC*VC)))*SIGMA_C(1)+SIGMA_S(2)
      SPANNUNGEN(3) = SIGMA_C(3)+SIGMA_S(3)


      ! SPANNUNGEN INFOLGE QUERKRAFT!

      STATUS_Q=MATERIAL(56)

      IF (STATUS_Q.GT.0) THEN

        STATUS_Q=1 ! AUFRUF �BER CMM (MODELL 4)

        CALL SUB_ZQ(SCHICHTINFO,MATERIAL
     &             ,SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z,STATUS_Q)

        SPANNUNGEN(1) = SPANNUNGEN(1)+SIGX_Q
        SPANNUNGEN(2) = SPANNUNGEN(2)+SIGY_Q
        SPANNUNGEN(3) = SPANNUNGEN(3)+TAUXY_Q

      ELSE

       STATUS_Q=10

      END IF

      ! AUSGABEWERTE:
      DRUCK(1) = REAL(SIGMA_C1)
      DRUCK(2) = REAL(SIGMA_C3)
      DRUCK(3) = REAL(E1)
      DRUCK(4) = REAL(E3)
      DRUCK(5) = REAL(FC)
      DRUCK(6) = REAL(SIGMA_S1)
      DRUCK(7) = REAL(SIGMA_S2)
      DRUCK(8) = REAL(EPS1)
      DRUCK(9) = REAL(EPS2)
      DRUCK(10) = REAL(THETA)
      DRUCK(11) = RHO_Z

      END SUBROUTINE SUB_S_E_DRUCK