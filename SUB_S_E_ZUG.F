!-----------------------------------------------------------------------
!     SUBROUTINE ZUR BERECHNUNG DER SPANNUNGEN IN FUNKTION DER
!     VERZERRUNGEN NACH EINEM MODELL F�R ZWEIACHSIGE ZUGBEANSPRUCHUNGEN
!
!   PROGRAMMIERUNG:     DR. KAREL THOMA, HOCHSCHULE LUZERN
!                       PATRICK ROOS, HOCHSCHULE LUZERN
!   DATUM:              03.06.2014
!-----------------------------------------------------------------------
      SUBROUTINE SUB_S_E_ZUG(EX,EY,GAMMA_XY,DEPS,MATERIAL,SCHICHTINFO,
     &                       SPANNUNGEN,ZUG,STATE_ZUG)

      IMPLICIT NONE

      ! VARIABLENDEKLARATION
      DOUBLE COMPLEX, INTENT(IN) :: EX, EY, GAMMA_XY
      DOUBLE PRECISION, DIMENSION(60), INTENT(IN) :: MATERIAL
      DOUBLE PRECISION, DIMENSION(3), INTENT(IN) :: DEPS
      INTEGER, INTENT(IN) :: SCHICHTINFO
      DOUBLE COMPLEX, DIMENSION(3), INTENT(OUT) :: SPANNUNGEN
      DOUBLE PRECISION, DIMENSION(11), INTENT(OUT) :: ZUG
      INTEGER, DIMENSION(2), INTENT(OUT) :: STATE_ZUG

      DOUBLE COMPLEX :: SIGMA_C1, SIGMA_C3, THETA, E1, E3
      DOUBLE COMPLEX, DIMENSION(3) :: SIGMA_C, SIGMA_S

      DOUBLE COMPLEX ::   N, HOEHE, CO, CU,
     &                    AS1, DM1, PSI1, FSY1, FSU1, ESU1, ESV1, ES1,
     &                    KA1, KB1, KC1,
     &                    AS2, DM2, PSI2, FSY2, FSU2, ESU2, ESV2, ES2,
     &                    KA2, KB2, KC2,
     &                    FCC, ECU, K_E, THETA_B0, THETA_B1, K_RISS,
     &                    LAMBDA, SRM1_VORGABE, SRM2_VORGABE
      DOUBLE COMPLEX ::   RHO1, RHO2, FCT, EC, DELTA_Z, HOEHE_FIKTIV,
     &                    C, ZS1, ZS2, ZO, SR10, SR20, PI,
     &                    SRM1, SRM2, SRM,
     &                    SIGMA_S1R, SIGMA_S2R, TAU_B0, TAU_B1,
     &                    WCR1, WCR2, EPS1, EPS2,
     &                    SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z
      INTEGER :: STAHL1, STAHL2, ZM1, ZM2, DIMENS, BEGRENZUNG,STATUS_Q
      INTEGER, DIMENSION(2) :: BETON

      DOUBLE PRECISION, DIMENSION(5) :: D_THETA, D_PSI1, D_PSI2

      ! INTERFACES ZU EXTERNEN SUBROUTINEN
      INTERFACE

      SUBROUTINE SUB_THETA_ALLGEMEIN(EX,EY,GAMMA_XY,THETA)
        DOUBLE COMPLEX, INTENT(IN) :: EX, EY, GAMMA_XY
        DOUBLE COMPLEX, INTENT(OUT) :: THETA
      END SUBROUTINE SUB_THETA_ALLGEMEIN

      SUBROUTINE SUB_E1_E3(EX,EY,GAMMA_XY,E1,E3)
        DOUBLE COMPLEX,  INTENT(IN) :: EX, EY, GAMMA_XY
        DOUBLE COMPLEX, INTENT(OUT) :: E1, E3
      END SUBROUTINE SUB_E1_E3

      SUBROUTINE SUB_S_E_BETON(BETON,E1,E3,FCC,ECU,K_E,SIGMA_C3)
        INTEGER, DIMENSION(2), INTENT(IN) :: BETON
        DOUBLE COMPLEX, INTENT(IN) :: E1, E3, FCC, ECU, K_E
        DOUBLE COMPLEX, INTENT(OUT):: SIGMA_C3
      END SUBROUTINE SUB_S_E_BETON

      SUBROUTINE SUB_S_E_STAHL(STAHL,EPS,FSY,FSU,ESU,ESV,ES,KA,
     &                         KB,KC,SIGMA_S)
        INTEGER, INTENT(IN) :: STAHL
        DOUBLE COMPLEX, INTENT(IN) :: EPS,FSY,FSU,ESU,ESV,ES,KA,KB,KC
        DOUBLE COMPLEX, INTENT(OUT):: SIGMA_S
      END SUBROUTINE SUB_S_E_STAHL

      SUBROUTINE SUB_S_E_ZM(ZM,ESM,SRM,DM,FSY,FSU,ESU,ESV,ES,TAU_B0,
     &                      TAU_B1,EC,RHO,KA,KB,KC,SIGMA_SR)
        INTEGER, INTENT(IN) :: ZM
        DOUBLE COMPLEX, INTENT(IN) :: ESM,SRM,DM,FSY,FSU,ESU,ESV,ES,
     &                                TAU_B0,TAU_B1,EC,RHO,KA,KB,KC
        DOUBLE COMPLEX, INTENT(OUT):: SIGMA_SR
      END SUBROUTINE SUB_S_E_ZM

      FUNCTION ABS_C(VAL)
        DOUBLE COMPLEX :: ABS_C
        DOUBLE COMPLEX, INTENT(IN) :: VAL
      END FUNCTION ABS_C

      SUBROUTINE SUB_ZQ(SCHICHTINFO,MATERIAL
     &                  ,SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z,STATE)
        INTEGER,INTENT(IN)            :: SCHICHTINFO
        DOUBLE PRECISION,DIMENSION(60),INTENT(IN):: MATERIAL
        DOUBLE COMPLEX,INTENT(OUT)    :: SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z
        INTEGER,INTENT(INOUT)         :: STATE
      END SUBROUTINE SUB_ZQ

      END INTERFACE

      ! VORGABEN:
      ZUG = 0D0
      STATE_ZUG = 0

      PI = CMPLX(4.0D0*ATAN(1.0D0),0D0,KIND=8)

      ! EINLESEN DER MATERIALKENNWERTE:
      ! ALLGEMEIN:
      DIMENS = MATERIAL(1)

      ! GEOMETRIE:
      N = CMPLX(MATERIAL(3),0D0,KIND=8)
      HOEHE = CMPLX(MATERIAL(4),0D0,KIND=8)
      CO = CMPLX(MATERIAL(5),0D0,KIND=8)
      CU = CMPLX(MATERIAL(6),0D0,KIND=8)

      ! BEWEHRUNG IN X-RICHTUNG:
      STAHL1 = MATERIAL(7)
      ZM1 = MATERIAL(8)
      AS1 = CMPLX(MATERIAL(9),0D0,KIND=8)
      DM1 = CMPLX(MATERIAL(10),0D0,KIND=8)
      PSI1 = CMPLX(MATERIAL(11),0D0,KIND=8)*(PI/CMPLX(180D0,0D0,KIND=8))
      FSY1 = CMPLX(MATERIAL(12),0D0,KIND=8)
      FSU1 = CMPLX(MATERIAL(13),0D0,KIND=8)
      ESU1 = CMPLX(MATERIAL(14),0D0,KIND=8)
      ESV1 = CMPLX(MATERIAL(15),0D0,KIND=8)
      ES1 = CMPLX(MATERIAL(16),0D0,KIND=8)
      KA1 = CMPLX(MATERIAL(17),0D0,KIND=8)
      KB1 = CMPLX(MATERIAL(18),0D0,KIND=8)
      KC1 = CMPLX(MATERIAL(19),0D0,KIND=8)

      ! BEWEHRUNG IN Y-RICHTUNG:
      STAHL2 = MATERIAL(20)
      ZM2 = MATERIAL(21)
      AS2 = CMPLX(MATERIAL(22),0D0,KIND=8)
      DM2 = CMPLX(MATERIAL(23),0D0,KIND=8)
      PSI2 = CMPLX(MATERIAL(24),0D0,KIND=8)*(PI/CMPLX(180D0,0D0,KIND=8))
      FSY2 = CMPLX(MATERIAL(25),0D0,KIND=8)
      FSU2 = CMPLX(MATERIAL(26),0D0,KIND=8)
      ESU2 = CMPLX(MATERIAL(27),0D0,KIND=8)
      ESV2 = CMPLX(MATERIAL(28),0D0,KIND=8)
      ES2 = CMPLX(MATERIAL(29),0D0,KIND=8)
      KA2 = CMPLX(MATERIAL(30),0D0,KIND=8)
      KB2 = CMPLX(MATERIAL(31),0D0,KIND=8)
      KC2 = CMPLX(MATERIAL(32),0D0,KIND=8)

      ! BER�CKSICHTIGUNG GENEIGTER BEWEHRUNG:
      D_PSI1(1) = REAL(ABS(ABS(REAL(PSI1))))                 ! PSI1 = 0
      D_PSI1(2) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)/2D0))    ! PSI1 = 90
      D_PSI1(3) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)))        ! PSI1 = 180
      D_PSI1(4) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)*1.5D0))  ! PSI1 = 270
      D_PSI1(5) = REAL(ABS(ABS(REAL(PSI1))-REAL(PI)*2D0))    ! PSI1 = 360

      D_PSI2(1) = REAL(ABS(ABS(REAL(PSI2))))                 ! PSI1 = 0
      D_PSI2(2) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)/2D0))    ! PSI1 = 90
      D_PSI2(3) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)))        ! PSI1 = 180
      D_PSI2(4) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)*1.5D0))  ! PSI1 = 270
      D_PSI2(5) = REAL(ABS(ABS(REAL(PSI2))-REAL(PI)*2D0))    ! PSI1 = 360

      IF (MIN(D_PSI1(1),D_PSI1(2),D_PSI1(3),D_PSI1(4),D_PSI1(5))
     &   .LT. 1D-2) THEN
      ES1 = ES1
      ESU1 = ESU1
      ESV1 = ESV1
      ELSE
      ES1 = ES1 !COS(PSI1)*COS(PSI1)*ES1
      ESU1 = ESU1 !/(COS(PSI1)*COS(PSI1))
      ESV1 = ESV1 !/(COS(PSI1)*COS(PSI1))
      ENDIF

      IF (MIN(D_PSI2(1),D_PSI2(2),D_PSI2(3),D_PSI2(4),D_PSI2(5))
     &   .LT. 1D-2) THEN
      ES2 = ES2
      ESU2 = ESU2
      ESV2 = ESV2
      ELSE
      ES2=  ES2 !SIN(PSI2)*SIN(PSI2)*ES2
      ESU2 = ESU2 !/(SIN(PSI2)*SIN(PSI2))
      ESV2 = ESV2 !/(SIN(PSI2)*SIN(PSI2))
      ENDIF

      ! BETON:
      BETON(1) = MATERIAL(33)
      BETON(2) = MATERIAL(41)
      FCC = CMPLX(MATERIAL(34),0D0,KIND=8)
      ECU = CMPLX(MATERIAL(36),0D0,KIND=8)
      K_E = CMPLX(MATERIAL(37),0D0,KIND=8)
      THETA_B0 = CMPLX(MATERIAL(38),0D0,KIND=8)
      THETA_B1 = CMPLX(MATERIAL(39),0D0,KIND=8)
      K_RISS = CMPLX(MATERIAL(40),0D0,KIND=8)

      ! RISSABSTAND:
      LAMBDA = CMPLX(MATERIAL(42),0D0,KIND=8)
      SRM1_VORGABE = CMPLX(MATERIAL(43),0D0,KIND=8)
      SRM2_VORGABE = CMPLX(MATERIAL(44),0D0,KIND=8)
      BEGRENZUNG = MATERIAL(45)

      ! BERECHNUNGEN BETONKENNWERTE:
      EC = K_E*FCC**CMPLX((1D0/3D0),0D0,KIND=8)
      FCT = CMPLX(0.3D0,0D0,KIND=8)*(FCC*FCC)**
     &      CMPLX((1D0/3D0),0D0,KIND=8)

      TAU_B0 = THETA_B0*FCT
      TAU_B1 = THETA_B1*FCT

      ! BERECHNUNG DER FIKTIVEN SCHICHTH�HE
      DELTA_Z = HOEHE/N

      ! BERECHNUNG DER SCHICHTH�HEN
      IF (SCHICHTINFO .EQ. 1 .OR. SCHICHTINFO .EQ. 2) THEN
      ZS1 = (HOEHE/CMPLX(2D0,0D0,KIND=8))-CU-(DM1/CMPLX(2D0,0D0,KIND=8))
      ZS2 = (HOEHE/CMPLX(2D0,0D0,KIND=8))-CU-DM1-
     &       (DM2/CMPLX(2D0,0D0,KIND=8))
      ELSE IF (SCHICHTINFO .EQ. 3 .OR. SCHICHTINFO .EQ. 4) THEN
      ZS1 = (HOEHE/CMPLX(2D0,0D0,KIND=8))-CO-(DM1/CMPLX(2D0,0D0,KIND=8))
      ZS2 = (HOEHE/CMPLX(2D0,0D0,KIND=8))-CO-DM1-
     &       (DM2/CMPLX(2D0,0D0,KIND=8))
      ELSE
      C = (CO+CU)/CMPLX(2D0,0D0,KIND=8)
      ZS1 = (HOEHE/CMPLX(2D0,0D0,KIND=8))-C-(DM1/CMPLX(2D0,0D0,KIND=8))
      ZS2 = (HOEHE/CMPLX(2D0,0D0,KIND=8))-C-DM1-
     &       (DM2/CMPLX(2D0,0D0,KIND=8))
      END IF

      ZO = (ZS1+ZS2)/CMPLX(2D0,0D0,KIND=8)
      HOEHE_FIKTIV = ((HOEHE/CMPLX(2D0,0D0,KIND=8))-(ZO))*
     &               CMPLX(2D0,0D0,KIND=8)

        IF (REAL(HOEHE_FIKTIV) .GT. REAL(HOEHE/
     &      CMPLX(2D0,0D0,KIND=8))) THEN
            HOEHE_FIKTIV = HOEHE/CMPLX(2D0,0D0,KIND=8)
        END IF

      IF (ABS(DIMENS-1) .LT. 0.1D0 .OR. ABS(REAL(N)-1D0) .LT. 0.1D0)
     &   THEN
         RHO1 = AS1/(HOEHE_FIKTIV*CMPLX(2D0,0D0,KIND=8))
         RHO2 = AS2/(HOEHE_FIKTIV*CMPLX(2D0,0D0,KIND=8))
      ELSE
         RHO1 = AS1/(HOEHE_FIKTIV)
         RHO2 = AS2/(HOEHE_FIKTIV)
      END IF

      ! MAXIMALE RISSABST�NDE
      SR10 = (DM1*FCT*(CMPLX(1D0,0D0,KIND=8)-RHO1))/
     &       (CMPLX(2D0,0D0,KIND=8)*TAU_B0*RHO1)
      SR20 = (DM2*FCT*(CMPLX(1D0,0D0,KIND=8)-RHO2))/
     &       (CMPLX(2D0,0D0,KIND=8)*TAU_B0*RHO2)

      ! HAUPTVERZERRUNGEN:
      CALL SUB_E1_E3(EX,EY,GAMMA_XY,E1,E3)
      CALL SUB_THETA_ALLGEMEIN(EX,EY,GAMMA_XY,THETA)

      ! KONTROLLE THETA
      D_THETA(1) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)/2D0))
      D_THETA(2) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)*1.5D0))
      D_THETA(3) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)))
      D_THETA(4) = REAL(ABS(ABS(REAL(THETA))-REAL(PI)*2D0))
      D_THETA(5) = REAL(ABS(REAL(THETA)))


      ! FALLUNTERSCHEIDUNG (FALL 1):
      IF (0D0 .LE. REAL(E3) .AND. REAL(E3) .LE. REAL((FCT*K_RISS)/EC))
     &THEN

        ! BETONSPANNUNGEN:
        SIGMA_C1 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_C3 = E3*EC

        SIGMA_C(1) = SIGMA_C1*COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
     &               COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8))) + SIGMA_C3*
     &               COS(THETA)*COS(THETA)
        SIGMA_C(2) = SIGMA_C1*SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
     &               SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8))) + SIGMA_C3*
     &               SIN(THETA)*SIN(THETA)
        SIGMA_C(3) = SIGMA_C1*(-SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
     &               COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))) + SIGMA_C3*
     &               (-SIN(THETA)*COS(THETA))


        ! VERZERRUNGEN IN BEWEHRUNGSRICHTUNG:
        IF (MIN(D_PSI1(1),D_PSI1(3),D_PSI1(5)) .LT. 1D-2) THEN
        EPS1 = EX
        ELSE IF (MIN(D_PSI1(2),D_PSI1(4)) .LT. 1D-2) THEN
        EPS1 = EY
        ELSE
        EPS1 = EX*COS(-PSI1)*COS(-PSI1)+EY*SIN(-PSI1)*SIN(-PSI1)+
     &         GAMMA_XY*(-SIN(-PSI1)*COS(-PSI1))
        END IF

        IF (MIN(D_PSI2(2),D_PSI2(4)) .LT. 1D-2 ) THEN
        EPS2 = EY
        ELSE IF (MIN(D_PSI2(1),D_PSI2(3),D_PSI2(5)) .LT. 1D-2 ) THEN
        EPS2 = EX
        ELSE
        EPS2 = EX*COS(-PSI2)*COS(-PSI2)+EY*SIN(-PSI2)*SIN(-PSI2)+
     &         GAMMA_XY*(-SIN(-PSI2)*COS(-PSI2))
        END IF

        SRM = LAMBDA/((ABS_C(SIN(THETA+PSI1))/SR10)+
     &        (ABS_C(SIN(THETA+PSI2))/SR20))

        ! FESTLEGUNG DER RISSABST�NDE:
        IF (MIN(D_THETA(3),D_THETA(4),D_THETA(5)) .LT. 1D-2
     &     .AND. MIN(D_PSI1(1),D_PSI1(3),D_PSI1(5)) .LT. 1D-2) THEN

          SRM1 = CMPLX(0D0,0D0,KIND=8)
          SRM2 = SRM/ABS_C(SIN(THETA+PSI2))

          IF (ABS(BEGRENZUNG - 1D0) .LT. 0.1D0) THEN
            IF (REAL(SRM2) .GT. REAL(LAMBDA*SR20)) THEN
              SRM2 = LAMBDA * SR20
            END IF
          END IF

          IF (ABS(REAL(SRM2_VORGABE)-1D0) .LT. 0.1D0) THEN
            SRM2 = SRM2
          ELSE
            SRM2 = SRM2_VORGABE
          END IF

          IF (REAL(DM1) .GT. 0.1D0) THEN
            CALL SUB_S_E_STAHL(STAHL1,EPS1,FSY1,FSU1,ESU1,ESV1,ES1,
     &                         KA1,KB1,KC1,SIGMA_S1R)
          ELSE
            SIGMA_S1R = CMPLX(0D0,0D0,KIND=8)
          END IF

          CALL SUB_S_E_ZM(ZM2,EPS2,SRM2,DM2,FSY2,FSU2,ESU2,ESV2,ES2,
     &                    TAU_B0,TAU_B1,EC,RHO2,KA2,KB2,KC2,SIGMA_S2R)

       ELSE IF (MIN(D_THETA(3),D_THETA(4),D_THETA(5)) .LT. 1D-2
     &     .AND. MIN(D_PSI2(1),D_PSI2(3),D_PSI2(5)) .LT. 1D-2) THEN

          SRM1 = SRM/ABS_C(SIN(THETA+PSI1))
          SRM2 = CMPLX(0D0,0D0,KIND=8)

          IF (ABS(BEGRENZUNG - 1D0) .LT. 0.1D0) THEN
            IF (REAL(SRM1) .GT. REAL(LAMBDA*SR10)) THEN
              SRM1 = LAMBDA * SR10
            END IF
          END IF

          IF (ABS(REAL(SRM1_VORGABE)-1D0) .LT. 0.1D0) THEN
            SRM1 = SRM1
          ELSE
            SRM1 = SRM1_VORGABE
          END IF

          IF (REAL(DM2) .GT. 0.1D0) THEN
            CALL SUB_S_E_STAHL(STAHL2,EPS2,FSY2,FSU2,ESU2,ESV2,ES2,
     &                         KA2,KB2,KC2,SIGMA_S2R)
          ELSE
            SIGMA_S2R = CMPLX(0D0,0D0,KIND=8)
          END IF

          CALL SUB_S_E_ZM(ZM1,EPS1,SRM1,DM1,FSY1,FSU1,ESU1,ESV1,ES1,
     &                    TAU_B0,TAU_B1,EC,RHO1,KA1,KB1,KC1,SIGMA_S1R)


        ELSE IF (MIN(D_THETA(1),D_THETA(2)) .LT. 1D-2
     &           .AND. MIN(D_PSI2(2),D_PSI2(4)) .LT. 1D-2 ) THEN

          SRM1 = SRM/ABS_C(SIN(THETA+PSI1))
          SRM2 = CMPLX(0D0,0D0,KIND=8)

          IF (ABS(BEGRENZUNG - 1D0) .LT. 0.1D0) THEN
            IF (REAL(SRM1) .GT. REAL(LAMBDA*SR10)) THEN
              SRM1 = LAMBDA * SR10
            END IF
          END IF

          IF (ABS(REAL(SRM1_VORGABE)-1D0) .LT. 0.1D0) THEN
            SRM1 = SRM1
          ELSE
            SRM1 = SRM1_VORGABE
          END IF

          CALL SUB_S_E_ZM(ZM1,EPS1,SRM1,DM1,FSY1,FSU1,ESU1,ESV1,ES1,
     &                    TAU_B0,TAU_B1,EC,RHO1,KA1,KB1,KC1,SIGMA_S1R)
          IF (REAL(DM2) .GT. 0.1D0) THEN
            CALL SUB_S_E_STAHL(STAHL2,EPS2,FSY2,FSU2,ESU2,ESV2,ES2,
     &                         KA2,KB2,KC2,SIGMA_S2R)
          ELSE
            SIGMA_S2R = CMPLX(0D0,0D0,KIND=8)
          END IF

        ELSE IF (MIN(D_THETA(1),D_THETA(2)) .LT. 1D-2
     &           .AND. MIN(D_PSI1(2),D_PSI1(4)) .LT. 1D-2 ) THEN

          SRM1 = CMPLX(0D0,0D0,KIND=8)
          SRM2 = SRM/ABS_C(SIN(THETA+PSI2))

          IF (ABS(BEGRENZUNG - 1D0) .LT. 0.1D0) THEN
            IF (REAL(SRM2) .GT. REAL(LAMBDA*SR20)) THEN
              SRM2 = LAMBDA * SR20
            END IF
          END IF

          IF (ABS(REAL(SRM2_VORGABE)-1D0) .LT. 0.1D0) THEN
            SRM2 = SRM2
          ELSE
            SRM2 = SRM2_VORGABE
          END IF

          CALL SUB_S_E_ZM(ZM2,EPS2,SRM2,DM2,FSY2,FSU2,ESU2,ESV2,ES2,
     &                    TAU_B0,TAU_B1,EC,RHO2,KA2,KB2,KC2,SIGMA_S2R)
          IF (REAL(DM1) .GT. 0.1D0) THEN
            CALL SUB_S_E_STAHL(STAHL1,EPS1,FSY1,FSU1,ESU1,ESV1,ES1,
     &                         KA1,KB1,KC1,SIGMA_S1R)
          ELSE
            SIGMA_S1R = CMPLX(0D0,0D0,KIND=8)
          END IF

        ELSE
          SRM1 = SRM/ABS_C(SIN(THETA+PSI1))
          SRM2 = SRM/ABS_C(SIN(THETA+PSI2))


          IF (ABS(BEGRENZUNG-1D0) .LT. 0.1D0) THEN
            IF (REAL(SRM1) .GT. REAL(LAMBDA*SR10)) THEN
              SRM1 = LAMBDA * SR10
            END IF
            IF (REAL(SRM2) .GT. REAL(LAMBDA*SR20)) THEN
              SRM2 = LAMBDA * SR20
            END IF
          END IF

          IF (ABS(REAL(SRM1_VORGABE)-1D0) .LT. 0.1D0) THEN
            SRM1 = SRM1
          ELSE
            SRM1 = SRM1_VORGABE
          END IF

          IF (ABS(REAL(SRM2_VORGABE)-1D0) .LT. 0.1D0) THEN
            SRM2 = SRM2
          ELSE
            SRM2 = SRM2_VORGABE
          END IF

          CALL SUB_S_E_ZM(ZM1,EPS1,SRM1,DM1,FSY1,FSU1,ESU1,ESV1,ES1,
     &                    TAU_B0,TAU_B1,EC,RHO1,KA1,KB1,KC1,SIGMA_S1R)
          CALL SUB_S_E_ZM(ZM2,EPS2,SRM2,DM2,FSY2,FSU2,ESU2,ESV2,ES2,
     &                    TAU_B0,TAU_B1,EC,RHO2,KA2,KB2,KC2,SIGMA_S2R)
        END IF

        IF (REAL(DM1) .GT. 0.1D0) THEN
        SRM1 = SRM1
        ELSE
        SRM1 = CMPLX(0D0,0D0,KIND=8)
        END IF

        IF (REAL(DM2) .GT. 0.1D0) THEN
        SRM2 = SRM2
        ELSE
        SRM2 = CMPLX(0D0,0D0,KIND=8)
        END IF

      ! UNTERSCHEIDUNG 2D / 3D

      IF (SCHICHTINFO .EQ. 1 .OR. SCHICHTINFO .EQ. 4) THEN
        AS2 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_S2R = CMPLX(0D0,0D0,KIND=8)
      ELSE IF (SCHICHTINFO .EQ. 2 .OR. SCHICHTINFO .EQ. 3) THEN
        AS1 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_S1R = CMPLX(0D0,0D0,KIND=8)
      END IF

      IF (ABS(DIMENS-1) .LT. 0.1D0) THEN
        SIGMA_S(1) = SIGMA_S1R*COS(-PSI1)*COS(-PSI1)*(AS1/HOEHE)+
     &               SIGMA_S2R*COS(-PSI2)*COS(-PSI2)*(AS2/HOEHE)
        SIGMA_S(2) = SIGMA_S1R*SIN(-PSI1)*SIN(-PSI1)*(AS1/HOEHE)+
     &               SIGMA_S2R*SIN(-PSI2)*SIN(-PSI2)*(AS2/HOEHE)
        SIGMA_S(3) = SIGMA_S1R*(-SIN(-PSI1)*COS(-PSI1))*(AS1/HOEHE)+
     &               SIGMA_S2R*(-SIN(-PSI2)*COS(-PSI2))*(AS2/HOEHE)

      ELSE
        SIGMA_S(1) = SIGMA_S1R*COS(-PSI1)*COS(-PSI1)*(AS1/DELTA_Z)+
     &               SIGMA_S2R*COS(-PSI2)*COS(-PSI2)*(AS2/DELTA_Z)
        SIGMA_S(2) = SIGMA_S1R*SIN(-PSI1)*SIN(-PSI1)*(AS1/DELTA_Z)+
     &               SIGMA_S2R*SIN(-PSI2)*SIN(-PSI2)*(AS2/DELTA_Z)
        SIGMA_S(3) = SIGMA_S1R*(-SIN(-PSI1)*COS(-PSI1))*(AS1/DELTA_Z)+
     &               SIGMA_S2R*(-SIN(-PSI2)*COS(-PSI2))*(AS2/DELTA_Z)

      END IF

        ! BERECHNUNG DER RISSWEITEN:
        WCR1 = EPS1*SRM1
        WCR2 = EPS2*SRM2

        ! SPANNUNGEN TOTAL:
        SPANNUNGEN(1) = SIGMA_C(1)+SIGMA_S(1)
        SPANNUNGEN(2) = SIGMA_C(2)+SIGMA_S(2)
        SPANNUNGEN(3) = GAMMA_XY*100D0


      !FALLUNTERSCHEIDUNG (FALL 2):
      ELSE IF (REAL(E3) .GT. REAL((FCT*K_RISS)/EC)) THEN

        ! BETONSPANNUNGEN:
        SIGMA_C1 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_C3 = CMPLX(0D0,0D0,KIND=8)

!        SIGMA_C(1) = SIGMA_C1*COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
!     &               COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8))) +
!     &               SIGMA_C3*COS(THETA)*COS(THETA)
!        SIGMA_C(2) = SIGMA_C1*SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
!     &               SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8))) +
!     &               SIGMA_C3*SIN(THETA)*SIN(THETA)
!        SIGMA_C(3) = SIGMA_C1*(-SIN(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))*
!     &               COS(THETA-(PI/CMPLX(2D0,0D0,KIND=8)))) +
!     &               SIGMA_C3*(-SIN(THETA)*COS(THETA))

        SIGMA_C(1) = EX*CMPLX(1D-3,0D0,KIND=8)
        SIGMA_C(2) = EY*CMPLX(1D-3,0D0,KIND=8)
        SIGMA_C(3) = GAMMA_XY*CMPLX(1D-3,0D0,KIND=8)

        ! VERZERRUNGEN IN BEWEHRUNGSRICHTUNG:
        IF (MIN(D_PSI1(1),D_PSI1(3),D_PSI1(5)) .LT. 1D-2) THEN
        EPS1 = EX
        ELSE IF (MIN(D_PSI1(2),D_PSI1(4)) .LT. 1D-2) THEN
        EPS1 = EY
        ELSE
        EPS1 = EX*COS(-PSI1)*COS(-PSI1)+EY*SIN(-PSI1)*SIN(-PSI1)+
     &         GAMMA_XY*(-SIN(-PSI1)*COS(-PSI1))
        END IF

        IF (MIN(D_PSI2(2),D_PSI2(4)) .LT. 1D-2 ) THEN
        EPS2 = EY
        ELSE IF (MIN(D_PSI2(1),D_PSI2(3),D_PSI2(5)) .LT. 1D-2 ) THEN
        EPS2 = EX
        ELSE
        EPS2 = EX*COS(-PSI2)*COS(-PSI2)+EY*SIN(-PSI2)*SIN(-PSI2)+
     &         GAMMA_XY*(-SIN(-PSI2)*COS(-PSI2))
        END IF

        SRM = LAMBDA/((ABS_C(SIN(THETA+PSI1))/SR10)+
     &        (ABS_C(SIN(THETA+PSI2))/SR20))


        ! FESTLEGUNG DER RISSABST�NDE:
        IF (MIN(D_PSI1(1),D_PSI1(2),D_PSI1(3),D_PSI1(4),D_PSI1(5))
     &  .LT. 1D-2 ) THEN
          SRM1 = LAMBDA*SR10
        ELSE
          SRM1 = SRM/ABS_C(SIN(THETA+PSI1))
        END IF


        IF (MIN(D_PSI2(1),D_PSI2(2),D_PSI2(3),D_PSI2(4),D_PSI2(5))
     &  .LT. 1D-2 ) THEN
          SRM2 = LAMBDA*SR20
        ELSE
          SRM2 = SRM/ABS_C(SIN(THETA+PSI2))
        END IF

        ! BEGRENZUNG DER RISSABST�NDE:
        IF (ABS(BEGRENZUNG-1D0) .LT. 0.1D0) THEN
          IF (REAL(SRM1) .GT. REAL(LAMBDA*SR10)) THEN
            SRM1 = LAMBDA*SR10
          END IF
          IF (REAL(SRM2) .GT. REAL(LAMBDA*SR20)) THEN
            SRM2 = LAMBDA*SR20
          END IF
        END IF

        ! VERWENDUNG VON VORGABEN:
        IF (ABS(REAL(SRM1_VORGABE)-1D0) .LT. 0.1D0) THEN
          SRM1 = SRM1
        ELSE
          SRM1 = SRM1_VORGABE
        END IF

        IF (ABS(REAL(SRM2_VORGABE)-1D0) .LT. 0.1D0) THEN
          SRM2 = SRM2
        ELSE
          SRM2 = SRM2_VORGABE
        END IF

        ! ELIMINIERUNG SRM WENN KEINE BEWEHRUNG VORHANDEN.
        IF (REAL(DM1) .GT. 0.1D0) THEN
          SRM1 = SRM1
        ELSE
          SRM1 = CMPLX(0D0,0D0,KIND=8)
        END IF

        IF (REAL(DM2) .GT. 0.1D0) THEN
          SRM2 = SRM2
        ELSE
          SRM2 = CMPLX(0D0,0D0,KIND=8)
        END IF

        ! BERECHNUNG DER STAHLSPANNUNGEN AM RISS
        CALL SUB_S_E_ZM(ZM1,EPS1,SRM1,DM1,FSY1,FSU1,ESU1,ESV1,ES1,
     &                  TAU_B0,TAU_B1,EC,RHO1,KA1,KB1,KC1,SIGMA_S1R)
        CALL SUB_S_E_ZM(ZM2,EPS2,SRM2,DM2,FSY2,FSU2,ESU2,ESV2,ES2,
     &                  TAU_B0,TAU_B1,EC,RHO2,KA2,KB2,KC2,SIGMA_S2R)

        ! UNTERSCHEIDUNG 2D / 3D

        IF (SCHICHTINFO .EQ. 1 .OR. SCHICHTINFO .EQ. 4) THEN
        AS2 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_S2R = CMPLX(0D0,0D0,KIND=8)
        ELSE IF (SCHICHTINFO .EQ. 2 .OR. SCHICHTINFO .EQ. 3) THEN
        AS1 = CMPLX(0D0,0D0,KIND=8)
        SIGMA_S1R = CMPLX(0D0,0D0,KIND=8)
        END IF

        IF (ABS(DIMENS-1) .LT. 0.1D0) THEN
        SIGMA_S(1) = SIGMA_S1R*COS(-PSI1)*COS(-PSI1)*(AS1/HOEHE)+
     &               SIGMA_S2R*COS(-PSI2)*COS(-PSI2)*(AS2/HOEHE)
        SIGMA_S(2) = SIGMA_S1R*SIN(-PSI1)*SIN(-PSI1)*(AS1/HOEHE)+
     &               SIGMA_S2R*SIN(-PSI2)*SIN(-PSI2)*(AS2/HOEHE)
        SIGMA_S(3) = SIGMA_S1R*(-SIN(-PSI1)*COS(-PSI1))*(AS1/HOEHE)+
     &               SIGMA_S2R*(-SIN(-PSI2)*COS(-PSI2))*(AS2/HOEHE)

        ELSE
        SIGMA_S(1) = SIGMA_S1R*COS(-PSI1)*COS(-PSI1)*(AS1/DELTA_Z)+
     &               SIGMA_S2R*COS(-PSI2)*COS(-PSI2)*(AS2/DELTA_Z)
        SIGMA_S(2) = SIGMA_S1R*SIN(-PSI1)*SIN(-PSI1)*(AS1/DELTA_Z)+
     &               SIGMA_S2R*SIN(-PSI2)*SIN(-PSI2)*(AS2/DELTA_Z)
        SIGMA_S(3) = SIGMA_S1R*(-SIN(-PSI1)*COS(-PSI1))*(AS1/DELTA_Z)+
     &               SIGMA_S2R*(-SIN(-PSI2)*COS(-PSI2))*(AS2/DELTA_Z)

        END IF

        ! BERECHNUNG DER RISSWEITEN:
        WCR1 = EPS1*SRM1
        WCR2 = EPS2*SRM2

        ! SPANNUNGEN TOTAL:
        SPANNUNGEN(1) = SIGMA_C(1)+SIGMA_S(1)
        SPANNUNGEN(2) = SIGMA_C(2)+SIGMA_S(2)
        SPANNUNGEN(3) = GAMMA_XY*100D0

      ELSE

        SPANNUNGEN(1) = EX*CMPLX(1D-6,0D0,KIND=8)
        SPANNUNGEN(2) = EY*CMPLX(1D-6,0D0,KIND=8)
        SPANNUNGEN(3) = GAMMA_XY*CMPLX(1D-6,0D0,KIND=8)

      END IF

      ! SPANNUNGEN INFOLGE QUERKRAFT!

      STATUS_Q=MATERIAL(56)

      IF (STATUS_Q.GT.0) THEN

        STATUS_Q=5 ! AUFRUF �BER CMM (MODELL 4)

        CALL SUB_ZQ(SCHICHTINFO,MATERIAL
     &             ,SIGX_Q,SIGY_Q,TAUXY_Q,RHO_Z,STATUS_Q)

        SPANNUNGEN(1) = SPANNUNGEN(1)+SIGX_Q
        SPANNUNGEN(2) = SPANNUNGEN(2)+SIGY_Q
        SPANNUNGEN(3) = SPANNUNGEN(3)+TAUXY_Q

      ELSE
       STATUS_Q=10
      END IF

      ! ZUSTAND DER BEWEHRUNGEN
      IF (ABS(REAL(SIGMA_S1R)) >= REAL(FSY1) .AND. ABS(REAL(SIGMA_S1R))
     &    .LT. REAL(FSU1)) THEN
          !PRINT *, 'BEWEHRUNG IN X-RICHTUNG AM FLIESSEN!'
          STATE_ZUG(1) = 1
      ELSE IF (ABS(REAL(SIGMA_S1R)) >= REAL(FSU1)) THEN
          !PRINT *, 'BEWEHRUNG IN X-RICHTUNG GERISSEN!'
          STATE_ZUG(1) = 2
      END IF

      IF (ABS(REAL(SIGMA_S2R)) >= REAL(FSY2) .AND. ABS(REAL(SIGMA_S2R))
     &    .LT. REAL(FSU2)) THEN
          !PRINT *, 'BEWEHRUNG IN Y-RICHTUNG AM FLIESSEN!'
          STATE_ZUG(2) = 1
      ELSE IF (ABS(REAL(SIGMA_S2R)) >= REAL(FSU2)) THEN
          !PRINT *, 'BEWEHRUNG IN Y-RICHTUNG GERISSEN!'
          STATE_ZUG(2) = 2
      END IF

      ! AUSGABEWERTE:
      ZUG(1) = REAL(SIGMA_C1)
      ZUG(2) = REAL(SIGMA_S1R)
      ZUG(3) = REAL(SIGMA_S2R)
      ZUG(4) = REAL(EPS1)
      ZUG(5) = REAL(EPS2)
      ZUG(6) = REAL(THETA)
      ZUG(7) = REAL(SRM1)
      ZUG(8) = REAL(SRM2)
      ZUG(9) = REAL(WCR1)
      ZUG(10) = REAL(WCR2)
      ZUG(11) = REAL(RHO_Z)

      END SUBROUTINE SUB_S_E_ZUG